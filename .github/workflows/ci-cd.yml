name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run database tests
      run: |
        python -c "
        import sys
        sys.path.append('backend')
        from db_utils import *
        from db_init import create_tables

        # Test database initialization
        create_tables()
        print('âœ… Database initialization successful')

        # Test basic functions
        propiedades = get_propiedades()
        unidades = get_unidades()
        propietarios = get_propietarios()
        print(f'âœ… Database functions working: {len(propiedades)} propiedades, {len(unidades)} unidades, {len(propietarios)} propietarios')
        "

    - name: Check code syntax
      run: |
        python -m py_compile frontend/app.py
        python -m py_compile backend/db_utils.py
        python -m py_compile backend/db_init.py
        echo "âœ… Code syntax check passed"

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install linting tools
      run: |
        pip install flake8 black isort

    - name: Run linting
      run: |
        # Check code formatting
        black --check --diff frontend/ backend/
        echo "âœ… Code formatting check passed"

        # Check imports sorting
        isort --check-only --diff frontend/ backend/
        echo "âœ… Import sorting check passed"

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run security scan
      uses: github/super-linter/slim@v5
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_PYTHON_BLACK: true
        VALIDATE_PYTHON_FLAKE8: true
        VALIDATE_PYTHON_ISORT: true

  deploy:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create deployment package
      run: |
        mkdir -p dist
        cp -r frontend dist/
        cp -r backend dist/
        cp requirements.txt dist/
        cp README.md dist/

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: appadmi-deployment
        path: dist/
        retention-days: 30

    - name: Notify deployment
      run: |
        echo "ðŸš€ Deployment package ready for AppADMI v${{ github.run_number }}"
        echo "ðŸ“¦ Package includes: frontend, backend, requirements, and documentation"
